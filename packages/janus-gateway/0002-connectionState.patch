From 77518a36e4df5808eb80f0b957197e8fa6d07b4c Mon Sep 17 00:00:00 2001
From: sergey radionov <rsatom@gmail.com>
Date: Mon, 11 Mar 2024 10:28:47 +0700
Subject: [PATCH] janus.js: connectionState callback added

it can be useful since latest Chrome versions
doesn't assign `failed` state to ICE connection state.
---
 html/janus.js | 7 +++++++
 mainpage.dox  | 3 +++
 2 files changed, 10 insertions(+)

diff --git a/html/janus.js b/html/janus.js
index 43f5e3ab13..6511a7e79b 100644
--- a/html/janus.js
+++ b/html/janus.js
@@ -1161,6 +1161,7 @@ function Janus(gatewayCallbacks) {
 		callbacks.error = (typeof callbacks.error == "function") ? callbacks.error : Janus.noop;
 		callbacks.dataChannelOptions = callbacks.dataChannelOptions || { ordered: true };
 		callbacks.consentDialog = (typeof callbacks.consentDialog == "function") ? callbacks.consentDialog : Janus.noop;
+		callbacks.connectionState = (typeof callbacks.connectionState == "function") ? callbacks.connectionState : Janus.noop;
 		callbacks.iceState = (typeof callbacks.iceState == "function") ? callbacks.iceState : Janus.noop;
 		callbacks.mediaState = (typeof callbacks.mediaState == "function") ? callbacks.mediaState : Janus.noop;
 		callbacks.webrtcState = (typeof callbacks.webrtcState == "function") ? callbacks.webrtcState : Janus.noop;
@@ -1251,6 +1252,7 @@ function Janus(gatewayCallbacks) {
 						data : function(callbacks) { sendData(handleId, callbacks); },
 						dtmf : function(callbacks) { sendDtmf(handleId, callbacks); },
 						consentDialog : callbacks.consentDialog,
+						connectionState : callbacks.connectionState,
 						iceState : callbacks.iceState,
 						mediaState : callbacks.mediaState,
 						webrtcState : callbacks.webrtcState,
@@ -1337,6 +1339,7 @@ function Janus(gatewayCallbacks) {
 						data : function(callbacks) { sendData(handleId, callbacks); },
 						dtmf : function(callbacks) { sendDtmf(handleId, callbacks); },
 						consentDialog : callbacks.consentDialog,
+						connectionState : callbacks.connectionState,
 						iceState : callbacks.iceState,
 						mediaState : callbacks.mediaState,
 						webrtcState : callbacks.webrtcState,
@@ -1850,6 +1853,10 @@ function Janus(gatewayCallbacks) {
 				config.bitrate.value = "0 kbits/sec";
 			}
 			Janus.log("Preparing local SDP and gathering candidates (trickle=" + config.trickle + ")");
+			config.pc.onconnectionstatechange = function() {
+				if(config.pc)
+					pluginHandle.connectionState(config.pc.connectionState);
+			};
 			config.pc.oniceconnectionstatechange = function() {
 				if(config.pc)
 					pluginHandle.iceState(config.pc.iceConnectionState);
diff --git a/mainpage.dox b/mainpage.dox
index c531b2e3f6..09da965229 100644
--- a/mainpage.dox
+++ b/mainpage.dox
@@ -349,6 +349,9 @@ var janus = new Janus(
  * when WebRTC is actually up and running between you and Janus (e.g., to notify
  * a user they're actually now active in a conference); notice that in case
  * of <b>false</b> a reason string may be present as an optional parameter;
+ * 		- \c connectionState: this callback is triggered when the connection state for the
+ * PeerConnection associated to the handle changes: the argument of the callback
+ * is the new state as a string (e.g., "connected" or "failed");
  * 		- \c iceState: this callback is triggered when the ICE state for the
  * PeerConnection associated to the handle changes: the argument of the callback
  * is the new state as a string (e.g., "connected" or "failed");
